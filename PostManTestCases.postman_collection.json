{
	"info": {
		"_postman_id": "ec0230f0-ea20-4b2a-b400-1eaf368b3d4a",
		"name": "PostManTestCases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22131095"
	},
	"item": [
		{
			"name": "getResponseBodyforAll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed syntax for accessing response data\r",
							"pm.test('Response status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response Content-Type is application/json', function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Each country object has a non-empty 'name' property\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(country => {\r",
							"        pm.expect(country.name.common).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"        pm.expect(country.name.official).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Official name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each country's population should be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(country) {\r",
							"        pm.expect(country.population).to.be.a('number').and.to.be.gte(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each country's 'latlng' array contains exactly two elements representing latitude and longitude\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(country) {\r",
							"        pm.expect(country.latlng).to.be.an('array').and.to.have.lengthOf(2);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restcountries.com/v3.1/all",
					"protocol": "https",
					"host": [
						"restcountries",
						"com"
					],
					"path": [
						"v3.1",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetCallwitpathparam",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Name object properties validation\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(country => {\r",
							"        pm.expect(country.name).to.be.an('object').that.has.all.keys('common', 'official', 'nativeName');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Currencies object should have AUD name and symbol properties\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"  \r",
							"  responseData.forEach(country => {\r",
							"    pm.expect(country.currencies.AUD.name).to.be.a('string');\r",
							"    pm.expect(country.currencies.AUD.symbol).to.be.a('string');\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Common name in the name object is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"  responseData.forEach(country => {\r",
							"    pm.expect(country.name.common).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Common name should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Official name in the name object is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function(country){\r",
							"        pm.expect(country.name.official).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Official name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Tld array is present and not empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(country => {\r",
							"    pm.expect(country.tld).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Tld array should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Latlng array is present and contains exactly 2 elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(country => {\r",
							"        pm.expect(country.latlng).to.be.an('array').and.to.have.lengthOf(2);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Population is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function(country) {\r",
							"        pm.expect(country.population).to.be.a('number').that.is.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Timezones array is present and not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(country) {\r",
							"        pm.expect(country.timezones).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Timezones array should not be empty\");\r",
							"    });\r",
							"});\r",
							"pm.test(\"UnMember property is a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(country) {\r",
							"        pm.expect(country.unMember).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Maps object contains googleMaps and openStreetMaps properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function(country) {\r",
							"        pm.expect(country.maps).to.be.an('object');\r",
							"        pm.expect(country.maps).to.have.property('googleMaps');\r",
							"        pm.expect(country.maps).to.have.property('openStreetMaps');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Flags object contains valid PNG and SVG properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(country => {\r",
							"        pm.expect(country.flags.png).to.match(/^https?:\\/\\/\\S+$/);\r",
							"        pm.expect(country.flags.svg).to.match(/^https?:\\/\\/\\S+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Start of week property should be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach((country) => {\r",
							"        pm.expect(country.startOfWeek).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Start of week should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Independent property is a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(country => {\r",
							"        pm.expect(country.independent).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Area property is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(country){\r",
							"        pm.expect(country.area).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Area should be a non-negative number\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restcountries.com/v3.1/name/Christmas Island?fullText=true",
					"protocol": "https",
					"host": [
						"restcountries",
						"com"
					],
					"path": [
						"v3.1",
						"name",
						"Christmas Island"
					],
					"query": [
						{
							"key": "fullText",
							"value": "true"
						}
					]
				}
			},
			"response": []
		}
	]
}